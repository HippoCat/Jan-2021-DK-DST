# Version 2.0 2101212315

import numpy as np

number_min = 1
number_max = 1000000 # Задаю минимальное и максимальное числа - в окончательноем решении можно убрать


def game_core_binary_search(number): # программируем двоичный поиск
    count = 1
    left = number_min
    right = number_max
    '''Переменные left и right - текущий отрезок поиска числа.
    Сначала приравниваем их соответственно number_min и number_max.
    Начинаем угадывать со среднего между left и right числа.'''
    predict = (left+right) // 2
    while number != predict:
        count+=1
        if number > predict:
            left = predict + 1
        elif number < predict:
            right = predict - 1
        predict = (left+right) // 2
    return(count) # выход из цикла, если угадали


def score_game(game_core):
    '''Запускаем игру 1000 раз, чтобы узнать, как быстро игра угадывает число'''
    count_ls = []
    np.random.seed(1)  # фиксируем RANDOM SEED, чтобы ваш эксперимент был воспроизводим!
    random_array = np.random.randint(number_min,number_max+1, size=(1000))
    for number in random_array:
        count_ls.append(game_core(number))
    score = int(np.mean(count_ls))
    print(f"Ваш алгоритм угадывает число в среднем за {score} попыток")
    return(score)

score_game(game_core_binary_search)
